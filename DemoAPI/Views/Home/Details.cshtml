@model Lib.Entities.Room

@{
    ViewBag.Title = "Details";

}

<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="/Scripts/jquery.signalR-2.4.2.js"></script>
<script src="/signalr/hubs"></script>
<script src="/signalr/hubs"></script>
<style>
    .chessboard {
        width: 850px;
        height: 850px;
        background-image: url('/Images/bancotuong.jpg');
        position: relative;
    }

    .chessnode {
        z-index: 1;
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .chessimgnode {
        width: 50px;
        height: 50px;
        z-index: 1;
    }
</style>



<div id="app">
    <div class="chessboard">

        <div v-for="item in chessNode" v-if="item !== null" :id="item.id" class="chessnode" v-bind:style="{ display: item.visible, top: item.top + 'px', left: item.left + 'px'}">
            <img :src="'/' + item.src" class="chessimgnode" />
        </div>

    </div>
    {{ message }}
    total record: {{total}}
    <input v-on:click="getTotal" type="button" value="get total" />
    List Student
    <ul id="demo">
        <li v-for="item in students" v-if="item !== null">
            {{item.Id}} {{item.Name}}
        </li>
    </ul>

    class room
    name: <input v-model="classRoom" type="text" value="" />
    class room name: {{classRoom}}

    <input v-on:click="insertClassRoom" type="button" value="insert Class Room" />

    <div>
        <ul id="discussion"></ul>
    </div>
</div>
<script>
    var stObject = {};

    var app = new Vue({
        el: '#app',
        data: {
            player:true,
            message: 'Hello Vue! 112',
            total: 0,
            students: [],
            classRoom: '',
            chessNode: [],
            chessMatrix: [[]],
            indexStartI: -1,
            indexStartJ: -1,
            indexStopI: -1,
            indexStopJ: -1,
            originalX: 106,
            originalY: 61,
            squares: 74
        },
        methods: {
            getTotal() {
                axios
                    .get('/api/Student/getbyId?Id=1')
                    .then(response => {
                        this.total = response.data.total;
                        this.students = response.data.data;
                        console.log(this.students);
                    })
                    .catch(error => {
                        console.log(error)
                    })
                    .finally()
            },
            initMatrix() {

                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        this.$set(this.chessMatrix[i], j, this.initPoint(this.getXValue(j), this.getYValue(i), ""));
                    }
                }

            },
            initPrintMatrix() {
                for (var i = 0; i <= 9; i++) {
                    var strMatrix = "";
                    for (var j = 0; j <= 8; j++) {
                        strMatrix += '  ' + "(" + this.chessMatrix[i][j].top + ',' + this.chessMatrix[i][j].left + "-" + this.chessMatrix[i][j].id + ")";
                    }
                    console.log();
                    console.log(strMatrix);
                }
            },
            initPoint(left, top, chessNodeId) {
                let temp = {};
                temp.top = top;
                temp.left = left;
                temp.id = chessNodeId;
                return temp;
            },
            getXValue(index) {
                return this.originalX + (index * this.squares);
            },
            getYValue(index) {
                return this.originalY + (index * this.squares);
            },
            hasChessNode(left, top, id) {

                this.indexStopI = -1;
                this.indexStopJ = -1;
                this.getIndex(left, top, "stop");
                var idPointStop = this.chessMatrix[this.indexStopI][this.indexStopJ].id;
                console.log(idPointStop);
                console.log(id);
                if (idPointStop == "") {
                    return 0; /// khong co quan co nao tai vi tri nay
                }
                if (id.indexOf("do") >= 0) {
                    if (idPointStop.indexOf("do") >= 0) {
                        return 1; //quan cung loai do
                    }
                    else
                        return -1; //quan khac loai
                }
                if (id.indexOf("den") >= 0) {
                    if (idPointStop.indexOf("den") >= 0) {
                        return 1; //quan cung loai do
                    }
                    else
                        return -1; //quan khac loai
                }

            },
            setChessNodeToMatrix(chessNode) {
                this.indexStopI = -1;
                this.indexStopJ = -1;

                this.getIndex(chessNode.left, chessNode.top, "stop");
                if (this.indexStopI == -1 && this.indexStopI == -1) {
                    return;
                }
                this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", chessNode.id);
            },
            getIndex(left, top, typeofMove) {
                if (typeofMove == "stop") {
                    this.indexStopI = -1;
                    this.indexStopJ = -1;
                }
                if (typeofMove == "start") {
                    this.indexStartI = -1;
                    this.indexStartJ = -1;
                }
                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        if (Math.abs(this.chessMatrix[i][j].top - top) < 20 && Math.abs(this.chessMatrix[i][j].left - left) < 20) {
                            if (typeofMove == "stop") {
                                this.indexStopI = i;
                                this.indexStopJ = j;
                                return;
                            }
                            if (typeofMove == "start") {
                                this.indexStartI = i;
                                this.indexStartJ = j;
                                return;
                            }
                        }
                    }
                }
            },
            insertClassRoom() {
                var payload = { Name: this.classRoom };
                var res = axios.post('/api/ClassRoom/insertClassRoom', payload);
                console.log(res.data);
            },
            getchessNode() {
                var res = axios.post('/api/chess/getchessnode').then(response => {
                    this.chessNode = response.data.chessnode;
                    this.chessMatrix = response.data.matrix;
                    this.initMatrix();
                    for (var i = 0; i < this.chessNode.length; i++) {
                        this.setChessNodeToMatrix(this.chessNode[i]);
                    }
                    this.initPrintMatrix();
                    //this.chessRoom = response.data.data;

                })
                    .catch(error => {
                        console.log(error)
                    })
                    .finally();
            },
            revert(left, top, id) {
                var node = $("#" + id);
                node.css({ 'top': top + 'px' });
                node.css({ 'left': left + 'px' });
            },
            kiemTraCheo(stopI, startI, stopJ, startJ) {
                if (stopI > startI && stopJ > startJ) {
                    if (app.chessMatrix[stopI - 1][stopJ - 1].id)
                        return 1;
                }
                if (stopI > startI && stopJ < startJ) {
                    if (app.chessMatrix[stopI - 1][stopJ + 1].id)
                        return 1;
                }
                if (stopI < startI && stopJ > startJ) {
                    if (app.chessMatrix[stopI + 1][stopJ - 1].id)
                        return 1;
                }
                if (stopI < startI && stopJ < startJ) {
                    if (app.chessMatrix[stopI + 1][stopJ + 1].id)
                        return 1;
                }
                return 0;
            },
            KiemTraTuong(tuong) {
                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        if (app.chessMatrix[i][j].id.indexOf(tuong) >= 0) {
                            console.log(" kttuong "+tuong);
                            return [i, j];


                        }
                    }
                }

                return 0;
            },
            kiemTraChieuTuongThangTuongDo(tuong, mau) {
                var chess = app.KiemTraTuong(tuong);
                var tam = 0;
                for (let i = 0; i < 9; i++) {
                    if (i != chess[0]) {
                        if ((app.chessMatrix[i][chess[1]].id)) {
                            tam++;
                            console.log("ke tuong" + app.chessMatrix[i][chess[1]].id + "  " + tuong);

                            if (tam==1 && ((app.chessMatrix[i][chess[1]].id.indexOf("xe" + mau) >= 0) || ((app.chessMatrix[i][chess[1]].id.indexOf("tot" + mau) >= 0) && ((i - chess[0]) == 1)) || ((app.chessMatrix[i][chess[1]].id.indexOf("chutuong" + mau) >= 0)))) {

                                return 1;
                            }
                            if (tam == 2) {
                                if ((app.chessMatrix[i][chess[1]].id.indexOf("phao" + mau) >= 0)) {
                                    return 1;
                                }
                                return 0;
                            }
                            
                        }
                    }


                }
                return 0;
            },
            KiemTraChieuTuongThangTuongDen(tuong, mau) {
                var chess = app.KiemTraTuong(tuong);
                var tam = 0;
                for (let i = chess[0] - 1; i >= 0; i--) {
                    if ((app.chessMatrix[i][chess[1]].id)) {
                        tam++;
                        console.log("ke tuong" + app.chessMatrix[i][chess[1]].id + "  " + tuong);
                        if (tam==1 &&((app.chessMatrix[i][chess[1]].id.indexOf("xe" + mau) >= 0) || ((app.chessMatrix[i][chess[1]].id.indexOf("tot" + mau) >= 0) && (Math.abs(i - chess[0]) == 1)) || ((app.chessMatrix[i][chess[1]].id.indexOf("chutuong" + mau) >= 0)))) {

                            return 1;
                        }
                        if (tam == 2) {
                            if ((app.chessMatrix[i][chess[1]].id.indexOf("phao" + mau) >= 0)) {
                                return 1;
                            }
                            return 0;
                        }
                        
                            

                    }


                }
                return 0;
            },
            KiemTraChieuTuongNgang(tuong, mau) {

                var chess = app.KiemTraTuong(tuong);
                var tam1 = 0;
                var tam2 = 0;
                for (let j = chess[1] - 1; j >= 0; j--) {
                    if ((app.chessMatrix[chess[0]][j].id)) {
                        tam1++;
                        console.log("ke tuong ngang " + app.chessMatrix[chess[0]][j].id + "  " + tuong);
                        if ((app.chessMatrix[chess[0]][j].id.indexOf("xe" + mau) >= 0)
                            || ((app.chessMatrix[chess[0]][j].id.indexOf("tot" + mau) >= 0) && ((j - chess[1]) == -1))
                        ) {
                            //temp = 1;
                            return 1;
                        }
                        if (tam1 == 2) {
                            console.log("xet pháo " + app.chessMatrix[chess[0]][j].id + "  " + tuong);
                            if ((app.chessMatrix[chess[0]][j].id.indexOf("phao" + mau) >= 0)) {
                                return 1;
                            }
                            return 0;
                        }
                    }
                }
                for (let j = chess[1] + 1; j < 8; j++) {
                    if ((app.chessMatrix[chess[0]][j].id)) {
                        tam2++;
                        console.log("ke tuong ngang " + app.chessMatrix[chess[0]][j].id + "  " + tuong);
                        if ((app.chessMatrix[chess[0]][j].id.indexOf("xe" + mau) >= 0)
                            || ((app.chessMatrix[chess[0]][j].id.indexOf("tot" + mau) >= 0) && ((j - chess[1]) == 1))
                        ) {

                            return 1;
                        }
                        if (tam2 == 2) {
                            if ((app.chessMatrix[chess[0]][j].id.indexOf("phao" + mau) >= 0)) {
                                return 1;
                            }
                            return 0;
                        }

                    }
                }
                return 0;
            },
            KiemTraChieuTuong(tuong) {
                var chess = app.KiemTraTuong(tuong);
                var mau = "";

                if (tuong == "chutuongdo") {
                    mau = "den";

                    if (app.kiemTraChieuTuongThangTuongDo(tuong, mau) == 1) {
                        return 1;
                    }
                    else if (app.KiemTraChieuTuongNgang(tuong, mau) == 1) {
                        return 1;

                    } else if (app.KiemTraChieuTuongMa(tuong, mau) == 1) {
                        return 1;
                    }
                }
                else if (tuong == "chutuongden") {

                    mau = "do";

                    if (app.KiemTraChieuTuongThangTuongDen(tuong, mau) == 1) {
                        return 1;
                    }
                    else if (app.KiemTraChieuTuongNgang(tuong, mau) == 1) {
                        return 1;
                    }
                    else if (app.KiemTraChieuTuongMa(tuong, mau) == 1) {
                        return 1;
                    }


                }
                console.log(mau + "mau" + chess[0] + " " + chess[1]);

                return 0;
            
            },
            KiemTraChieuTuongMa(tuong, mau) {
                var chess = app.KiemTraTuong(tuong);
                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 8; j++) {
                        if (app.chessMatrix[i][j].id) {
                            if (((Math.abs(i - chess[0]) == 2 && Math.abs(j - chess[1]) == 1)
                                || (Math.abs(i - chess[0]) == 1 && Math.abs(j - chess[1]) == 2))
                                && (app.chessMatrix[i][j].id.indexOf("ma" + mau) >= 0) && app.KiemTraChieuTuongChanMa(tuong)==0) {
                                return 1;
                            }
                        }
                    }
                }
                return 0;


            },
            KiemTraChieuTuongChanMa(tuong) {
                var chess = app.KiemTraTuong(tuong);
                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 8; j++) {
                        if (app.chessMatrix[i][j].id) {
                            if (((Math.abs(i - chess[0]) == 1 && Math.abs(j - chess[1]) == 1)
                                || (Math.abs(i - chess[0]) == 1 && Math.abs(j - chess[1]) == 1))
                                && (app.chessMatrix[i][j].id)) {
                                return 1;
                            }
                        }
                    }
                }
                return 0;


            },
            kiemTraThang(stopI, startI, stopJ, startJ) {
                var check = 0;
                if (stopI > startI && stopJ == startJ) {
                    for (let i = startI + 1; i < stopI; i++) {
                        if (app.chessMatrix[i][stopJ].id)
                            check++;
                    }
                }
                if (stopI == startI && stopJ < startJ) {
                    for (let i = stopJ + 1; i < startJ; i++) {
                        if (app.chessMatrix[stopI][i].id)
                            check++;
                    }
                }
                if (stopI < startI && stopJ == startJ) {
                    for (let i = stopI + 1; i < startI; i++) {
                        if (app.chessMatrix[i][stopJ].id)
                            check++;
                    }
                }
                if (stopI == startI && stopJ > startJ) {
                    for (let i = startJ + 1; i < stopJ; i++) {
                        if (app.chessMatrix[startI][i].id)
                            check++;
                    }
                }
                return check;
            },
          

        },
        updated: function () {
            var originaltop = 0;
            var originalleft = 0;
            $(".chessnode").draggable({
                start: function (event, ui) {
                    originaltop = ui.position.top;
                    originalleft = ui.position.left;
                },
                drag: function () {
                    var node = $("#" + this.id);
                    node.css({ 'z-index': '2' });
                },
                stop: function (event, ui) {
                    //console.log('x=' + ui.position.top + '  y=' + ui.position.left);
                    var node = $("#" + this.id);
                    node.css({ 'z-index': '1' });
                    app.indexStopI = -1;
                    app.indexStopJ = -1;
                    app.getIndex(ui.position.left, ui.position.top, "stop");
                    var movelist;
                    try {
                        movelist = [{
                            id: this.id, top: app.chessMatrix[app.indexStopI][app.indexStopJ].top, left: app.chessMatrix[app.indexStopI][app.indexStopJ].left, visible: true
                        }];
                    }
                    catch (error) {
                        app.revert(originalleft, originaltop, this.id);
                    }
                    if (app.indexStopI != -1 && app.indexStopJ != -1) {

                        app.getIndex(originalleft, originaltop, "start");
                        var flag = false;

                        if (this.id.indexOf("chutuongdo") >= 0 && app.player == true) {
                                if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) == 1) ||
                                    (Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                    && (app.indexStopJ >= 3 && app.indexStopJ <= 5 && app.indexStopI >= 0 && app.indexStopI <= 2) &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {

                                    if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {

                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                    }
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = false;
                            }
                            
                            }

                        if ((this.id.indexOf("sido1") >= 0 || this.id.indexOf("sido2") >= 0) && app.player == true) {
                                var chess = app.chessMatrix[app.indexStopI][app.indexStopJ];
                                var nodehidden = $("#" + chess.id);

                                var node = $("#" + chess.id);
                                console.log(chess.id);
                                console.log(this.id);
                                console.log(app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id));
                                if (((Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 1))
                                    && (app.indexStopJ >= 3 && app.indexStopJ <= 5 && app.indexStopI >= 0 && app.indexStopI <= 2) &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {

                                    if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                    }

                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = false;
                                }

                            }

                        if ((this.id.indexOf("tuongdo1") >= 0 || this.id.indexOf("tuongdo2") >= 0) && app.player == true) {
                                if (((Math.abs(app.indexStopI - app.indexStartI) == 2 && Math.abs(app.indexStopJ - app.indexStartJ) == 2))
                                    && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 4) && app.kiemTraCheo(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                    if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                    }
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = false;
                                }
                        }

                        if ((this.id.indexOf("mado1") >= 0 || this.id.indexOf("mado2") >= 0) && app.player == true) {
                                if (((Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 2) ||
                                    (Math.abs(app.indexStopI - app.indexStartI) == 2 && Math.abs(app.indexStopJ - app.indexStartJ) == 1))
                                    && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraCheo(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                    if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                        if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                             alert("hết cờ");
                                             location.reload(true);
                                        }
                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                    }
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = false;
                                }
                            }


                        if (this.id.indexOf("xedo1") >= 0 || this.id.indexOf("xedo2") >= 0 && app.player == true) {


                            if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 8) ||
                                (Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraThang(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {

                                    if ((app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("tuongden") >= 0) && (app.indexStartI > app.indexStopI)) {
                                        app.revert(originalleft, originaltop, this.id);
                                    }
                                    else {
                                        if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                            alert("hết cờ");
                                            location.reload(true);
                                        }
                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                        flagVsb = false;
                                        var node = $("#" + this.id);
                                        node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                        node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                        node.css({ 'z-index': '1' });
                                        app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                        flag = true;
                                        app.player = false;
                                    }

                                }
                                else {
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = false;
                                }


                            }

                        }
                        if ((this.id.indexOf("phaodo1") >= 0 || this.id.indexOf("phaodo2") >= 0)&& app.player == true) {

                                if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 8) ||
                                    (Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                    && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraThang(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) == 0) {


                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                    node.css({ 'z-index': '1' });
                                    flag = true;
                                    app.player = false;

                                } else if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 8) ||
                                    (Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                    && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraThang(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 1 &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) == -1) {
                                    if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                        alert("hết cờ");
                                        location.reload(true);
                                    }
                                    $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                    node.css({ 'z-index': '1' });
                                    flag = true;
                                    app.player = false;
                                }
                        }
                        if ((this.id.indexOf("totdo1") >= 0 || this.id.indexOf("totdo2") >= 0 || this.id.indexOf("totdo3") >= 0 || this.id.indexOf("totdo4") >= 0 || this.id.indexOf("totdo5") >= 0) && app.player == true) {
                                if ((
                                    (app.indexStopI - app.indexStartI == 1 && app.indexStopJ - app.indexStartJ == 0))
                                    && (app.indexStopI >= 3 && app.indexStopI <= 4) &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                    if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) == -1) {
                                        if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                            alert("hết cờ");
                                            location.reload(true);
                                        }
                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                    }
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = false;

                                } else if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) == 1) ||
                                    (app.indexStopI - app.indexStartI == 1 && app.indexStopJ - app.indexStartJ == 0))
                                    && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 5 && app.indexStopI <= 9) &&
                                    app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                    if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                        if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                            alert("hết cờ");
                                            location.reload(true);
                                        }
                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                        console.log(app.chessMatrix[app.indexStopI][app.indexStopJ].id);

                                    }
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = false;
                                }
                            }


                        if (this.id.indexOf("chutuongden") >= 0 && app.player == false) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 8) ||
                                (Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraThang(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {

                                    if ((app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) && (app.indexStartI > app.indexStopI)) {
                                        app.revert(originalleft, originaltop, this.id);
                                    }
                                    else {
                                        if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                            alert("hết cờ");
                                            location.reload(true);
                                        }
                                        $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                        flagVsb = false;
                                        var node = $("#" + this.id);
                                        node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                        node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                        node.css({ 'z-index': '1' });
                                        app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                        flag = true;
                                        app.player = true;
                                    }

                                }
                                else {
                                    var node = $("#" + this.id);
                                    node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                    node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                    node.css({ 'z-index': '1' });
                                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                    flag = true;
                                    app.player = true;
                                }


                            }
                            
                        }
                        if ((this.id.indexOf("maden1") >= 0 || this.id.indexOf("maden2") >= 0) && app.player == false) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 2) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 2 && Math.abs(app.indexStopJ - app.indexStartJ) == 1))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraCheo(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                    if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                        alert("hết cờ");
                                        location.reload(true);
                                    }
                                    $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                }
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                node.css({ 'z-index': '1' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                                app.player = true;
                            }
                            
                        }
                        if ((this.id.indexOf("xeden1") >= 0 || this.id.indexOf("xeden2") >= 0) && app.player == false) {

                            var ches = app.KiemTraTuong("chutuongdo");
                            console.log('t' + ches[0] + 't' + ches[1]);
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 8) ||
                                (Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraThang(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                               
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                    if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                        alert("hết cờ");
                                        location.reload(true);
                                    }
                                    $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                }
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                node.css({ 'z-index': '1' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                                app.player = true;
                            }

                        }


                        if ((this.id.indexOf("phaoden1") >= 0 || this.id.indexOf("phaoden2") >= 0) && app.player == false) {
                            var ches = app.KiemTraTuong("chutuongdo");
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 8) ||
                                (Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraThang(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) == 0) {
                                

                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                node.css({ 'z-index': '1' });
                                flag = true;
                                app.player = true;

                            } else if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 8) ||
                                (Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 9) && app.kiemTraThang(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 1 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) == -1) {
                                if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                    alert("hết cờ");
                                    location.reload(true);
                                }
                                $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                node.css({ 'z-index': '1' });
                                flag = true;
                                app.player = true;
                            }
                        }



                        if ((this.id.indexOf("totden1") >= 0 || this.id.indexOf("totden2") >= 0 || this.id.indexOf("totden3") >= 0 || this.id.indexOf("totden4") >= 0 || this.id.indexOf("totden5") >= 0) && app.player == false) {
                            if (
                                ((app.indexStopI - app.indexStartI == -1) && (app.indexStopJ - app.indexStartJ == 0))
                                && ((app.indexStopI == 5) || (app.indexStopI == 4)) &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                    if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                        alert("hết cờ");
                                        location.reload(true);
                                    }
                                    $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                }
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                node.css({ 'z-index': '1' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                                app.player = true;
                            } else if (((Math.abs(app.indexStopI - app.indexStartI) == 0) && (Math.abs(app.indexStopJ - app.indexStartJ) == 1) ||
                                ((app.indexStopI - app.indexStartI == -1) && (app.indexStopJ - app.indexStartJ == 0)))
                                && ((app.indexStopJ >= 0) && (app.indexStopJ <= 8)) && ((app.indexStopI >= 0) && (app.indexStopI <= 4)) &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                    if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                        alert("hết cờ");
                                        location.reload(true);
                                    }
                                    $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                }
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                node.css({ 'z-index': '1' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                                app.player = true;
                            }
                        }
                        if ((this.id.indexOf("siden1") >= 0 || this.id.indexOf("siden2") >= 0) && app.player == false) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 1))
                                && (app.indexStopJ >= 3 && app.indexStopJ <= 5 && app.indexStopI >= 7 && app.indexStopI <= 9) &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                    if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                        alert("hết cờ");
                                        location.reload(true);
                                    }
                                    $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                }
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                node.css({ 'z-index': '1' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                                app.player = true;
                            }

                        }

                        if ((this.id.indexOf("tuongden1") >= 0 || this.id.indexOf("tuongden2") >= 0) && app.player == false) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 2 && Math.abs(app.indexStopJ - app.indexStartJ) == 2))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 5 && app.indexStopI <= 9) && app.kiemTraCheo(app.indexStopI, app.indexStartI, app.indexStopJ, app.indexStartJ) == 0 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, this.id) != 1) {
                                if (app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStartI][app.indexStartJ].id) == -1) {
                                    if (app.chessMatrix[app.indexStopI][app.indexStopJ].id.indexOf("chutuong") >= 0) {
                                        alert("hết cờ");
                                        location.reload(true);
                                    }
                                    $("#" + app.chessMatrix[app.indexStopI][app.indexStopJ].id).hide();
                                    //var movelist = [{ id: app.chessMatrix[app.indexStopI][app.indexStopJ].id, top: 999, left: 999, visible: false }];
                                    //app.sendMoveList(movelist);
                                }
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                node.css({ 'z-index': '1' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                                app.player = true;
                            }
                        }

                        @*console.log('sjdsjf ' + app.KiemTraAnToan());
                        if (app.KiemTraAnToan() == 1) {
                            alert("chieu tuong");
                        } else {*@
                            if (flag == false ) {

                                app.revert(originalleft, originaltop, this.id);

                            }
                            else {
                                

                                var res = axios.post('/api/chess/movenode', movelist).then(response => {
                                    
                                    if (app.KiemTraChieuTuong("chutuongdo") == 1) {
                                        alert("chiếu tướng");
                                    }
                                   if (app.KiemTraChieuTuong("chutuongden") == 1) {
                                        alert("chiếu tướng");
                                    }

                                })
                                    .catch(error => {
                                        console.log(error)
                                    })
                                    .finally();

                            }
                        @*}*@



                    }
                    else {
                        app.revert(originalleft, originaltop, this.id);
                    }


                }
            });
        },
        mounted: function () {
            var chat = $.connection.requestlog;
            $.connection.hub.start().done(function () {

            });
            chat.client.postToClient = function (data) {
                //$('#discussion').append('Message' + data + '<br />');

                var result = [];
                result = JSON.parse(data);
                for (var i = 0; i < result.length; i++) {
                    var node = $("#" + result[i].id);
                    var startTop = parseInt(node.css('top'), 10);
                    var startLeft = parseInt(node.css('left'), 10);
                    node.css({ 'top': result[i].top + 'px' });
                    node.css({ 'left': result[i].left + 'px' });
                    node.css({ 'display': result[i].visible });
                    app.getIndex(startLeft, startTop, "start");
                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                    app.getIndex(result[i].left, result[i].top, "stop");
                    app.$set(app.chessMatrix[app.indexStopI][app.indexStopJ], "id", result[i].id);

                    app.initPrintMatrix();
                    //node.css({ 'top': result[i].top + 'px, left: ' + result[i].left + 'px, display:' + result[i].visible});
                    break;
                }
            };
            this.getchessNode();
        }
    })
</script>
